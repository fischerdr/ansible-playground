---
# check_s3_credentials.yml
# Description: Validates S3 credentials for Portworx storage on OpenShift clusters

- name: Validate Portworx S3 Credentials
  hosts: localhost
  gather_facts: false

  vars:
    ocp_cluster: "{{ cluster_name }}"
    kubeconfig_path: "/root/clusters/{{ ocp_cluster }}/install/auth/kubeconfig"
    oc_binary_path: "/root/clusters/{{ ocp_cluster }}/oc"
    validation_failed: false

  tasks:
    - name: Verify kubeconfig exists and is readable
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_stat

    - name: Fail if kubeconfig is not readable
      ansible.builtin.fail:
        msg: "Kubeconfig file not found or not readable at {{ kubeconfig_path }}"
      when: not kubeconfig_stat.stat.exists or not kubeconfig_stat.stat.readable

    - name: Set environment for OpenShift commands
      ansible.builtin.set_fact:
        env_vars:
          KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Get cluster API endpoint
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} config view --minify -ojsonpath='{.clusters[0].cluster.server}'"
      register: cluster_endpoint
      environment: "{{ env_vars }}"
      changed_when: false

    - name: Extract API hostname
      ansible.builtin.set_fact:
        api_host: "{{ cluster_endpoint.stdout | regex_replace('^https://([^:]+).*$', '\\1') }}"

    - name: Check API endpoint connectivity
      ansible.builtin.wait_for:
        host: "{{ api_host }}"
        port: 6443
        timeout: 5
      register: api_check
      ignore_errors: true

    - name: Check Portworx namespace exists
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} get namespace portworx --no-headers --output=go-template='{.metadata.name}'"
      register: px_namespace
      environment: "{{ env_vars }}"
      changed_when: false
      failed_when: false

    - name: Get Portworx STC
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} get stc -n portworx --no-headers -o name"
      register: px_stc
      environment: "{{ env_vars }}"
      changed_when: false
      failed_when: false
      when: px_namespace.rc == 0

    - name: Get Portworx admin token
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} -n portworx get secrets px-admin-token -ojsonpath='{.data.auth-token}'"
      register: px_token_base64
      environment: "{{ env_vars }}"
      changed_when: false
      when: px_namespace.rc == 0 and px_stc.rc == 0
      no_log: true

    - name: Decode Portworx admin token
      ansible.builtin.set_fact:
        px_token: "{{ px_token_base64.stdout | b64decode }}"
      when: px_namespace.rc == 0 and px_stc.rc == 0 and px_token_base64 is defined
      no_log: true

    - name: Get Portworx pods
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} get pods -n portworx --selector='name==portworx' -o name --no-headers"
      register: px_pods
      environment: "{{ env_vars }}"
      changed_when: false
      when: px_namespace.rc == 0 and px_stc.rc == 0

    - name: Validate S3 credentials for each Portworx pod
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} -n portworx -c portworx exec -i {{ item }} -- bash -c 'export PXCTL_AUTH_TOKEN={{ px_token }} && /opt/pwx/bin/pxctl credentials validate px-snap-creds'"
      environment: "{{ env_vars }}"
      register: s3_validation
      changed_when: false
      failed_when: false
      loop: "{{ px_pods.stdout_lines }}"
      when: px_namespace.rc == 0 and px_stc.rc == 0 and px_token is defined
      no_log: true

    - name: Get node name for failed validations
      ansible.builtin.command:
        cmd: "{{ oc_binary_path }} get -n portworx -o jsonpath='{.spec.nodeName}' {{ item.item }}"
      environment: "{{ env_vars }}"
      register: node_name
      changed_when: false
      loop: "{{ s3_validation.results }}"
      when: item.rc != 0 or 'successfully' not in item.stdout
      loop_control:
        label: "{{ item.item }}"

    - name: Display validation results
      ansible.builtin.debug:
        msg:
          - "Node: {{ item.1.stdout }}"
          - "Pod: {{ item.0.item }}"
          - "Validation Result: {{ item.0.stdout }}"
      loop: "{{ s3_validation.results| zip(node_name.results)| list }}"
      when: "'successfully' not in item.0.stdout"

    - name: Set validation status
      ansible.builtin.set_fact:
        validation_failed: true
      when: s3_validation.results| selectattr('stdout', 'not match', 'successfully')| list| length > 0

    - name: Final status check
      ansible.builtin.fail:
        msg: "S3 credential validation failed for cluster {{ ocp_cluster }}"
      when: validation_failed
