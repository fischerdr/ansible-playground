---
- name: Manage Kubernetes Resources
  hosts: localhost
  gather_facts: false
  vars:
    k8s_ns: my-namespace  # Replace with your namespace
    service_account_name: my-service-account  # Replace with your service account name
    cluster_role_name: pxbackup-sa-clusterrolebinding
    sa_role_name: pxbackup-sa-clusterrolebinding
    sa_role_binding_name: pxbackup-sa-rolebinding
    cluster_role_binding_name: pxbackup-sa-clusterrolebinding
    kubeconfig_path: /tmp/kubeconfig.yaml  # Path to save the generated kubeconfig

  tasks:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ k8s_ns }}"

    - name: Ensure service account exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "{{ service_account_name }}"
            namespace: "{{ k8s_ns }}"

    - name: Check if service account token exists
      ansible.builtin.set_fact:
        token_name: "{{ service_account_name }}-token"

    - name: Get existing service account token
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ k8s_ns }}"
        name: "{{ token_name }}"
      register: existing_token
      no_log: true

    - name: Create service account token if not exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ token_name }}"
            namespace: "{{ k8s_ns }}"
            annotations:
              kubernetes.io/service-account.name: "{{ service_account_name }}"
          type: kubernetes.io/service-account-token
      when: existing_token.resources | length == 0

    - name: Get the service account token secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ k8s_ns }}"
      register: sa_secrets

    - name: Extract service account token
      ansible.builtin.set_fact:
        sa_token: >-
          {{
            (item.data.token | b64decode)
            if item.metadata.annotations['kubernetes.io/service-account.name'] == service_account_name
            else omit
          }}
      loop: "{{ sa_secrets.resources }}"
      when: "'kubernetes.io/service-account.name' in item.metadata.annotations"
      vars:
        service_account_secret: "{{ item }}"
      delegate_to: localhost

    - name: Ensure ClusterRole exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: "{{ cluster_role_name }}"
          rules:
            - apiGroups: ["*"]
              resources: ["*"]
              verbs: ["get", "list", "create", "update", "delete"]

    - name: Ensure Role exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: "{{ sa_role_name }}"
            namespace: "{{ k8s_ns }}"
          rules:
            - apiGroups: ["stork.libopenstorage.org"]
              resources: ["*"]
              verbs: ["*"]
            - apiGroups: ["*"]
              resources: ["*"]
              verbs: ["get", "list", "create", "update", "delete"]

    - name: Ensure ClusterRoleBinding exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "{{ cluster_role_binding_name }}"
          subjects:
            - kind: ServiceAccount
              name: "{{ service_account_name }}"
              namespace: "{{ k8s_ns }}"
          roleRef:
            kind: ClusterRole
            name: "{{ cluster_role_name }}"
            apiGroup: rbac.authorization.k8s.io

    - name: Ensure RoleBinding exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: "{{ sa_role_binding_name }}"
            namespace: "{{ k8s_ns }}"
          subjects:
            - kind: ServiceAccount
              name: "{{ service_account_name }}"
              namespace: "{{ k8s_ns }}"
          roleRef:
            kind: Role
            name: "{{ sa_role_name }}"
            apiGroup: rbac.authorization.k8s.io

    - name: Get cluster information
      ansible.builtin.command: kubectl config view --raw --flatten
      register: cluster_info
      changed_when: cluster_info.rc != 0 # <- Uses the return code to define when the task has changed.

    - name: Extract cluster server URL
      ansible.builtin.set_fact:
        cluster_url: >-
          {{
            cluster_info.stdout
            | regex_search('https://[^"]+')
          }}

    - name: Create kubeconfig file
      ansible.builtin.copy:
        content: |
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              certificate-authority-data: {{ sa_secrets.resources[0].data['ca.crt'] }}
              server: {{ cluster_url }}
            name: kubernetes
          contexts:
          - context:
              cluster: kubernetes
              namespace: {{ k8s_ns }}
              user: {{ service_account_name }}
            name: {{ service_account_name }}-context
          current-context: {{ service_account_name }}-context
          users:
          - name: {{ service_account_name }}
            user:
              token: {{ sa_token }}
        dest: "{{ kubeconfig_path }}"
        mode: preserve
      delegate_to: localhost

    - name: Print kubeconfig location
      ansible.builtin.debug:
        msg: "Kubeconfig file generated at {{ kubeconfig_path }}"
