---
# Playbook to verify PX Backup cloud credentials
# This playbook uses the pxpure collection to verify cloud credentials

- name: Verify PX Backup Cloud Credentials
  hosts: localhost
  gather_facts: false
  vars:
    include_secrets: false
    # Common variables used across all playbooks
    px_backup_api_url: "https://px-backup-svc-exposed.com"
    org_id: "default"
    pxcentral_auth_url: "https://px-auth-svc-exposed.com"
    pxcentral_client_id: "client_id"
    pxcentral_username: "username"
    pxcentral_password: "password"
    token_duration: "365d"

  tasks:
    - name: Login to Px-Backup using username and password
      ansible.builtin.assert:
        that:
          - pxcentral_auth_url is defined
          - pxcentral_client_id is defined
          - pxcentral_username is defined
          - pxcentral_password is defined
        fail_msg: "Required variables must be defined"

    - name: Request bearer token
      purepx.px_backup.auth:
        auth_url: "{{ pxcentral_auth_url }}"
        client_id: "{{ pxcentral_client_id }}"
        username: "{{ pxcentral_username }}"
        password: "{{ pxcentral_password }}"
        token_duration: "{{ token_duration | default('7d') }}"
      register: token_response
      check_mode: false
      when: px_backup_token is not defined # Fetch token only if it's not already set
      no_log: true  # Hide sensitive information in logs

    # Set token fact only if we got a valid response
    - name: Set token fact
      ansible.builtin.set_fact:
        px_backup_token: "{{ token_response.access_token }}"
      when:
        - token_response is defined
        - token_response.access_token is defined
        - token_response.access_token | length > 0
      no_log: true  # Hide sensitive information in logs

    # Verify we have a valid token
    - name: Verify token is set
      ansible.builtin.assert:
        that:
          - px_backup_token is defined
          - px_backup_token | length > 0
        fail_msg: "Failed to obtain valid authentication token"

    - name: Verify cloud credentials exist
      ansible.builtin.assert:
        that:
          - pxbackup_cloud_access_key is defined
          - pxbackup_cloud_secret_key is defined
        fail_msg: "Required cloud credentials are not defined"
        success_msg: "Cloud credentials are properly defined"
      no_log: true

    - name: Cloud Credential Enumerate call
      purepx.px_backup.cloud_credential:
        operation: INSPECT_ALL
        api_url: "{{ px_backup_api_url }}"
        token: "{{ px_backup_token }}"
        org_id: "{{ org_id | default('default') }}"
        include_secrets: "{{ include_secrets }}"
      register: cloud_creds_result
      no_log: true

    - name: Display cloud credentials status
      ansible.builtin.debug:
        msg: "Cloud credentials are valid"
      when: cloud_creds_result is success

    - name: Fail if cloud credentials are invalid
      ansible.builtin.fail:
        msg: "Cloud credentials validation failed"
      when: cloud_creds_result is failed
