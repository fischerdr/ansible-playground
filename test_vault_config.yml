---
- name: "Test Vault Configuration and Kubeconfig Retrieval"
  hosts: localhost
  gather_facts: false
  vars:
    # Required variables that would normally come from inventory
    inventory_id: "test123"  # Replace with your inventory ID
    cluster_name: "test-cluster"  # Replace with your cluster name

    # Vault configuration
    vault_mount_point: "static_secrets"
    vault_token_path: "/runner/project/vault_token"
    kubeconfig_temp_path: "/runner/project/tmp/kubeconfig_{{ cluster_name }}.yaml"
    kubeconfig_path: "/runner/project/pxbkup_kubeconfig/kubeconfig_{{ cluster_name }}.yaml"

    # These will be set by the inventory response but providing defaults for testing
    vault_address: ""  # Replace with your vault address
    vault_namespace: ""  # Replace with your vault namespace
    vault_default_path: ""  # Replace with your vault path

  tasks:
    - name: "Get Vault configuration from inventory"
      ansible.builtin.uri:
        url: "https://inventory.com/v2/inventory/{{ inventory_id }}"
        method: GET
        return_content: true
        validate_certs: "{{ validate_certs | default(true) }}"
        headers:
          Accept: "application/json"
      register: inventory_response

    - name: "Set Vault configuration facts"
      ansible.builtin.set_fact:
        vault_address: "{{ inventory_response.json | community.general.json_query('kubernetes_platform.secrets_management.platform_vault[0].address') }}"
        vault_namespace: "{{ inventory_response.json | community.general.json_query('kubernetes_platform.secrets_management.platform_vault[0].namespace') }}"
        vault_default_path_full: "{{ inventory_response.json | community.general.json_query('kubernetes_platform.secrets_management.platform_vault[0].default_path') }}"

    - name: "Set Vault mount point and clean default path"
      ansible.builtin.set_fact:
        vault_mount_point: "{{ vault_default_path_full.split('/')[0] }}"
        vault_default_path: "{{ vault_default_path_full if not vault_default_path_full.startswith('static_secrets/') else vault_default_path_full[14:] }}"

    - name: "Set required variables for createSaRole task"
      ansible.builtin.set_fact:
        vault_mount_point: "{{ vault_mount_point }}"
        vault_namespace: "{{ vault_namespace }}"
        kubeconfig_vault_path: "{{ vault_default_path }}"

    - name: "Check if Vault token file exists"
      ansible.builtin.stat:
        path: "{{ vault_token_path }}"
      register: token_file_stat

    - name: "Fail if Vault token file does not exist"
      ansible.builtin.fail:
        msg: "Vault token file not found at {{ vault_token_path }}. Please ensure the token file exists and is readable."
      when: not token_file_stat.stat.exists

    - name: "Read Vault token from file"
      ansible.builtin.set_fact:
        vault_token: "{{ lookup('ansible.builtin.file', vault_token_path) | trim }}"
      failed_when: vault_token | length == 0
      register: token_read
      ignore_errors: true

    - name: "Fail if Vault token is empty"
      ansible.builtin.fail:
        msg: "Vault token file is empty or unreadable. Please ensure the token file contains a valid token."
      when: token_read is failed

    - name: "Verify required Vault variables"
      ansible.builtin.assert:
        that:
          - vault_address is defined and vault_address | length > 0
          - vault_namespace is defined and vault_namespace | length > 0
          - vault_default_path is defined and vault_default_path | length > 0
        fail_msg: "Missing required Vault variables. Please ensure vault_address, vault_namespace, and vault_default_path are set."
        success_msg: "All required Vault variables are present."

    - name: "Retrieve kubeconfig from Vault"
      community.hashi_vault.vault_kv2_get:
        url: "{{ vault_address }}"
        path: "{{ vault_default_path }}"
        engine_mount_point: "{{ vault_mount_point }}"
        auth_method: token
        token: "{{ vault_token }}"
        namespace: "{{ vault_namespace }}"
      register: vault_kubeconfig_response
      ignore_errors: true

    - name: "Fail if Vault request failed"
      ansible.builtin.fail:
        msg: "Failed to retrieve kubeconfig from Vault: {{ vault_kubeconfig_response.msg | default('Unknown error') }}"
      when: vault_kubeconfig_response is failed

    - name: "Verify kubeconfig content exists in Vault response"
      ansible.builtin.assert:
        that:
          - vault_kubeconfig_response.data is defined
          - vault_kubeconfig_response.data.data is defined
          - vault_kubeconfig_response.data.data.kubeconfig is defined
        fail_msg: "Kubeconfig not found in Vault response. Please check the path and key name."
        success_msg: "Kubeconfig found in Vault response."

    - name: "Set kubeconfig variable"
      ansible.builtin.set_fact:
        kubeconfig_content: "{{ vault_kubeconfig_response.data.data.kubeconfig }}"

    - name: "Verify kubeconfig content is not empty"
      ansible.builtin.assert:
        that:
          - kubeconfig_content is defined
          - kubeconfig_content | length > 0
        fail_msg: "Retrieved kubeconfig is empty. Please check the Vault data."
        success_msg: "Kubeconfig retrieved successfully"

    - name: "Verify kubeconfig was retrieved"
      ansible.builtin.debug:
        msg: "Kubeconfig retrieved successfully"
        verbosity: 1
